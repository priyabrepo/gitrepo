SELECT *
FROM Orders
INNER JOIN Customers
ON Orders.CustomerID=Customers.CustomerID;
OrderID	CustomerID	EmployeeID	OrderDate	ShipperID	CustomerName	ContactName	Address	City	PostalCode	Country


SELECT *
FROM Orders
OrderID	CustomerID	EmployeeID	OrderDate	ShipperID

SELECT *
FROM Customers
CustomerID	CustomerName	ContactName	Address	City	PostalCode	Country


join 3 tables

SELECT Orders.OrderID, Customers.CustomerName, Shippers.ShipperName
FROM ((Orders
INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID)
INNER JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID);

---------------------------------------------------------------------------------------------------
Trigger
 SQL codes that are automatically executed in response to certain events on a particular table. These are used to maintain the integrity of the data.
 
 Syntax and Example


Create Trigger Trigger_Name
(Before | After)  [ Insert | Update | Delete]
on [Table_Name]
[ for each row | for each column ]
[ trigger_body ]

ex:
CREATE TRIGGER sample_trigger
before INSERT
ON student
FOR EACH ROW
SET new.total = new.marks/6;


DROP A Trigger;
DROP TRIGGER trigger_name;



Display A Trigger :
SHOW TRIGGERS;
    or
SHOW TRIGGERS
IN database_name;


***************************
CREATE OR REPLACE TRIGGER "MAHINDRA"."VOB_DOC_DETAILS_TRG"
BEFORE INSERT ON VOB_DOC_DETAILS
FOR EACH ROW
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.VOB_DD_REFNUM IS NULL THEN
      SELECT VOB_DOC_DETAILS_SEQ.NEXTVAL INTO :NEW.VOB_DD_REFNUM FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "MAHINDRA"."VOB_DOC_DETAILS_TRG" ENABLE;
---------------------------------------------------------------------------------------
view
a view is a virtual table based on the result-set of an SQL statement.

CREATE VIEW view_name AS
SELECT column1, column2, ...
FROM table_name
WHERE condition;



CREATE VIEW [Brazil Customers] AS
SELECT CustomerName, ContactName
FROM Customers
WHERE Country = 'Brazil';


Updating a View

CREATE OR REPLACE VIEW view_name AS
SELECT column1, column2, ...
FROM table_name
WHERE condition;


DROP VIEW view_name;

DROP VIEW [Brazil Customers];

---------------------------------------------------------------------------------------------------
Stored Procedure
A stored procedure is a prepared SQL code that you can save, so the code can be reused over and over again.

Syntax:
CREATE PROCEDURE procedure_name
AS
sql_statement
GO;


Execute a Stored Procedure:
EXEC procedure_name;


Example:
CREATE PROCEDURE SelectAllCustomers
AS
SELECT * FROM Customers
GO;
EXEC SelectAllCustomers;

Stored Procedure With One Parameter:
CREATE PROCEDURE SelectAllCustomers @City nvarchar(30)
AS
SELECT * FROM Customers WHERE City = @City
GO;

EXEC SelectAllCustomers @City = 'London';

Stored Procedure With Multiple Parameters:
EXEC SelectAllCustomers @City = 'London', @PostalCode = 'WA1 1DP';
---------------------------------------------------------------------------------------
top 3 or bottom 3 records:
SELECT * FROM Customers order by PostalCode desc LIMIT 3;
        --------or--------
SELECT ROW_NUMBER() OVER ( ORDER BY VOBD_REF_NO)as row_num FROM VOB_DETAILS where row_num > 10 AND row_num <=20;