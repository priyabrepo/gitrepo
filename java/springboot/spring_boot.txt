Spring Boot
**********************************

- Spring Boot is a Spring module that provides the RAD (Rapid Application Development) feature to the Spring framework.
- Spring Boot is a project that is built on the top of the Spring Framework. It provides an easier and faster way to set up, configure, and run both simple and web-based applications
  (RESTfull services)/ not ui...
- In short, Spring Boot is the combination of Spring Framework and Embedded Servers.
- In Spring Boot, there is no requirement for XML configuration (deployment descriptor). 
   It uses framework to reduce configurations (convention over configuration software design paradigm) that means it decreases the effort of the developer.
   
Why Spring Boot Framework?

-The dependency injection approach is used in Spring Boot.
-It contains powerful database transaction management capabilities.
-It simplifies integration with other Java frameworks like JPA/Hibernate ORM, Struts, etc.
-It reduces the cost and development time of the application.

Spring sister projects are as follows:

-Spring Data: It simplifies data access from the relational and NoSQL databases.
-Spring Batch: It provides powerful batch processing.
-Spring Security: It is a security framework that provides robust security to applications.
-Spring Social: It supports integration with social networking like LinkedIn.
-Spring Integration: It is an implementation of Enterprise Integration Patterns. 
  It facilitates integration with other enterprise applications using lightweight messaging and declarative adapters.
  
Advantages of Spring Boot
- It creates stand-alone Spring applications that can be started using Java -jar.
- It tests web applications easily with the help of different Embedded HTTP servers such as Tomcat, Jetty, etc. We don't need to deploy WAR files.
- It provides opinionated 'starter' POMs to simplify our Maven configuration.
- It provides production-ready features such as metrics, health checks, and externalized configuration.
- There is no requirement for XML configuration.
- It offers a CLI tool for developing and testing the Spring Boot application.
- It offers the number of plug-ins.
- It also minimizes writing multiple boilerplate codes (the code that has to be included in many places with little or no alteration), XML configuration, and annotations.
- It increases productivity and reduces development time.

Limitations of Spring Boot
- Spring Boot can use dependencies that are not going to be used in the application. These dependencies increase the size of the application.

Goals of Spring Boot
- The main goal of Spring Boot is to reduce development, unit test, and integration test time.

- Provides Opinionated Development approach
- Avoids defining more Annotation Configuration
- Avoids writing lots of import statements
- Avoids XML Configuration.



spring vs spring Boot vs Spring MVC  : check the snap
**************************************


There are four layers in Spring Boot 
- Spring Boot follows a layered architecture in which each layer communicates with the layer directly below or above (hierarchical structure) it.
 1.Presentation Layer
      - The presentation layer handles the HTTP requests, 
	    translates the JSON parameter to object, and authenticates the request and transfer it to the business layer. In short, it consists of views i.e., frontend part.
 2.Business Layer(service,controller)
      - The business layer handles all the business logic. It consists of service classes and uses services provided by data access layers. 
	    It also performs authorization and validation.
 3.Persistence Layer(model(ex:the dao))
      - The persistence layer contains all the storage logic and translates business objects from and to database rows.
 4.Database Layer(data base(ex: sql,oracle))
      - In the database layer, CRUD (create, retrieve, update, delete) operations are performed.


Spring Initializr
********************
web-based tool provided by the Pivotal Web Service(sb frame work).

Spring Initializr Modules
----------------------------
initializr-actuator: It provides additional information and statistics on project generation. It is an optional module.
initializr-bom: In this module, BOM stands for Bill Of Materials. In Spring Boot, BOM is a special kind of POM that is used to control the versions of a project's dependencies. It provides a central place to define and update those versions. It provides flexibility to add a dependency in our module without worrying about the versions.
Outside the software world, the BOM is a list of parts, items, assemblies, and other materials required to create products. It explains what, how, and where to collect required materials.
initializr-docs: It provides documentation.
initializr-generator: It is a core project generation library.
initializr-generator-spring:
initializr-generator-test: It provides a test infrastructure for project generation.
initializr-metadata: It provides metadata infrastructure for various aspects of the projects.
initializr-service-example: It provides custom instances.
initializr-version-resolver: It is an optional module to extract version numbers from an arbitrary POM.
initializr-web: It provides web endpoints for third party clients.

Spring Annotations
------------------------
- Spring Annotations is a form of metadata that provides data about a program.annotations are used to provide supplemental information about a program.

@Required: 
     applies to the bean setter method. 
	 must be populated at configuration time with the required property 
	 exception BeanInitilizationException.

@Autowired:
     When we use @Autowired annotation, the spring container auto-wires the bean by matching data-type.
	 
@Configuration: 
     a class-level annotation. The class annotated with @Configuration used by Spring Containers as a source of bean definitions.
	 
@ComponentScan:
     to scan a package for beans.
	 used with the annotation @Configuration
	 We can also specify the base packages to scan for Spring Components.
	 
@Bean: 
     method-level annotation.
	 It is an alternative of XML <bean> tag. 
	 tells the method to produce a bean to be managed by Spring Container.
	 
@Component:
      class-level annotation.
	  used to mark a Java class as a bean. 
	  A Java class annotated with @Component is found during the classpath.
	  Framework pick it up and configure it in the application context as a Spring Bean.
	  
@Controller: 
      class-level annotation. 
	   It is a specialization of @Component
	   It marks a class as a web request handler. 
	   often used to serve web pages. By default, it returns a string that indicates which route to redirect.
	   mostly used with @RequestMapping annotation.
@Service: 
      class level.
	  It tells the Spring that class contains the business logic.
@Repository: 
      class-level annotation.
	  The repository is a DAOs (Data Access Object) that access the database directly.
	  The repository does all the operations related to the database.
	  
Spring Boot Annotations
------------------------

@EnableAutoConfiguration:
     auto-configures the bean that is present in the classpath and configures it to run the methods. 
	 alternative of the annotation, i.e. @SpringBootApplication.
	 
@SpringBootApplication: It is a combination of three annotations @EnableAutoConfiguration, @ComponentScan, and @Configuration.

Spring MVC and REST Annotations
--------------------------------
@RequestMapping: 
     It is used to map the web requests.
	 It has many optional elements like consumes, header, method, name, params, path, produces, and value. We use it with the class as well as the method.
@GetMapping:
      It maps the HTTP GET requests on the specific handler method.
	  to create a web service endpoint that fetches
	  used instead of using: @RequestMapping(method = RequestMethod.GET)
@PostMapping:
      It maps the HTTP POST requests on the specific handler method. 
	  to create a web service endpoint that creates
	  used instead of using: @RequestMapping(method = RequestMethod.POST)
@PutMapping:
     It maps the HTTP PUT requests on the specific handler method
	 to create a web service endpoint that creates or updates
	 used instead of using: @RequestMapping(method = RequestMethod.PUT)
@DeleteMapping:
     It maps the HTTP DELETE requests on the specific handler method. 
	 It is used to create a web service endpoint that deletes a resource.
	 It is used instead of using: @RequestMapping(method = RequestMethod.DELETE)
@PatchMapping:
      It maps the HTTP PATCH requests on the specific handler method.
	  It is used instead of using: @RequestMapping(method = RequestMethod.PATCH)
@RequestBody: 
      used to bind HTTP request with an object in a method parameter. 
	  Internally it uses HTTP MessageConverters to convert the body of the request. 
	  When we annotate a method parameter with @RequestBody, the Spring framework binds the incoming HTTP request body to that parameter.
@ResponseBody: 
      binds the method return value to the response body.
	  It tells the Spring Boot Framework to serialize a return an object into JSON and XML format.
@PathVariable: 
      used to extract the values from the URI. 
	  most suitable for the RESTful web service, where the URL contains a path variable.
	  We can define multiple @PathVariable in a method.
@RequestParam:
      used to extract the query parameters form the URL.also known as a query parameter. 
	  most suitable for web applications. It can specify default values if the query parameter is not present in the URL.	
@RequestHeader: 
       used to get the details about the HTTP request headers.
	   as a method parameter. 
	   The optional elements of the annotation are name, required, value, defaultValue. For each detail in the header, we should specify separate annotations. We can use it multiple time in a method
@RestController:
       can be considered as a combination of @Controller and @ResponseBody annotations. 
	   @RestController annotation is itself annotated with the @ResponseBody annotation. It eliminates the need for annotating each method with @ResponseBody.
	   
@RequestAttribute: 
      It binds a method parameter to request attribute. It provides convenient access to the request attributes from a controller method.
      With the help of @RequestAttribute annotation, we can access objects that are populated on the server-side.






























