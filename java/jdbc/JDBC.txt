JDBC
*******
JDBC stands for Java Database Connectivity.
part of JavaSE (Java Standard Edition).

There are four types of JDBC drivers:
--------------------------------------
1.JDBC-ODBC Bridge Driver,
2.Native Driver,
3.Network Protocol Driver, and
4.Thin Driver

**
Starting with version 3.1, JDBC has been developed under the Java Community Process. JSR 54 specifies JDBC 3.0 (included in J2SE 1.4), JSR 114 specifies the JDBC Rowset additions,
 and JSR 221 is the specification of JDBC 4.0 (included in Java SE 6).[2]
JDBC 4.1, is specified by a maintenance release 1 of JSR 221[3] and is included in Java SE 7.[4]
JDBC 4.2, is specified by a maintenance release 2 of JSR 221[5] and is included in Java SE 8.[6]
The latest version, JDBC 4.3, is specified by a maintenance release 3 of JSR 221[7] and is included in Java SE 9.[8]

Before JDBC, ODBC API was the database API to connect and execute the query with the database.It was written in C. 
**

- The java.sql package contains classes and interfaces for JDBC API. 

JDBC Driver
------------
There are 4 types of JDBC drivers:
1.JDBC-ODBC bridge driver - uses ODBC driver to connect to the database. In Java 8, the JDBC-ODBC Bridge has been removed.
2.Native-API driver (partially java driver) - uses the client-side libraries of the database. 
3.Network Protocol driver (fully java driver) - uses middleware (application server) that converts JDBC calls directly or indirectly into the vendor-specific database protocol. 
4.Thin driver (fully java driver) - The thin driver converts JDBC calls directly into the vendor-specific database protocol. *being used*

5 steps to connect to database using JDBC. 
-------------------------------------------
1.Register the Driver class
    syntax-  public static void forName(String className)throws ClassNotFoundException
	- Note: Since JDBC 4.0, explicitly registering the driver is optional.
      We just need to put vender's Jar in the classpath, and then JDBC driver manager can detect and load the driver automatically.
	- ex: Class.forName("oracle.jdbc.driver.OracleDriver");  
	
2.Create connection
    syntax:
	   1) public static Connection getConnection(String url)throws SQLException  
       2) public static Connection getConnection(String url,String name,String password)throws SQLException 
	ex:Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","system","password");  

3.Create statement
    syntax: public Statement createStatement()throws SQLException  
	ex: Statement stmt=con.createStatement(); 
	
4.Execute queries
    syntax: public ResultSet executeQuery(String sql)throws SQLException 
	
ResultSet rs=stmt.executeQuery("select * from emp");  
  
while(rs.next()){  
System.out.println(rs.getInt(1)+" "+rs.getString(2));  
}  


5.Close connection
    syntax: public void close()throws SQLException .
	ex: con.close();  
    - Note: Since Java 7, JDBC has ability to use try-with-resources statement to automatically close resources of type Connection, ResultSet, and Statement.

****************************************************************************************************
for mySQL                                                                                          *
Class.forName("com.mysql.jdbc.Driver");                                                            * 
Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/sonoo","root","root");     *
also check:                                                                                        *
There are two ways to connect java application with the access database.                           *
Without DSN (Data Source Name)                                                                     *
With DSN                                                                                           *
****************************************************************************************************

	
Two ways to load the jar file: 
1.paste the ojdbc14.jar file in jre/lib/ext folder
2.set classpath 
     1.TEMPORATY - C:>set classpath=c:\folder\ojdbc14.jar;.;  
	 2.PERMANENT - envirnment variable C:\oraclexe\app\oracle\product\10.2.0\server\jdbc\lib\ojdbc14.jar;
	 
DriverManager class
-------------------
keeps track of the drivers that are available and handles establishing a connection between a database and the appropriate driver. 
maintains a list of Driver classes that have registered themselves by calling the method DriverManager.registerDriver().

             Method	                                                                                 Description
1) public static void registerDriver(Driver driver):	           is used to register the given driver with DriverManager.
2) public static void deregisterDriver(Driver driver):	           is used to deregister the given driver (drop the driver from the list) with DriverManager.
3) public static Connection getConnection(String url):	           is used to establish the connection with the specified url.
4) public static Connection getConnection
           (String url,String userName,String password):	       is used to establish the connection with the specified url, username and password.

Connection interface
--------------------
session between java application and database. 
Connection interface is a factory of Statement, PreparedStatement, and DatabaseMetaData i.e. object of Connection can be used to get the object of Statement and DatabaseMetaData. 
The Connection interface provide many methods for transaction management like commit(), rollback() etc.
By default, connection commits the changes after executing queries.

Commonly used methods of Connection interface:
1) public Statement createStatement(): creates a statement object that can be used to execute SQL queries.
2) public Statement createStatement(int resultSetType,int resultSetConcurrency): Creates a Statement object that will generate ResultSet objects with the given type and concurrency.
3) public void setAutoCommit(boolean status): is used to set the commit status.By default it is true.
4) public void commit(): saves the changes made since the previous commit/rollback permanent.
5) public void rollback(): Drops all changes made since the previous commit/rollback.
6) public void close(): closes the connection and Releases a JDBC resources immediately.

Statement interface
--------------------
provides methods to execute queries with the database. 
statement interface is a factory of ResultSet i.e. it provides factory method to get the object of ResultSet.

Commonly used methods of Statement interface:
The important methods of Statement interface are as follows:

1) public ResultSet executeQuery(String sql): is used to execute SELECT query. It returns the object of ResultSet.
2) public int executeUpdate(String sql): is used to execute specified query, it may be create, drop, insert, update, delete etc.
3) public boolean execute(String sql): is used to execute queries that may return multiple results.
4) public int[] executeBatch(): is used to execute batch of commands.

ResultSet interface
--------------------
- The object of ResultSet maintains a cursor pointing to a row of a table. Initially, cursor points to before the first row.
- By default, ResultSet object can be moved forward only and it is not updatable.
- But we can make this object to move forward and backward direction
   by passing either TYPE_SCROLL_INSENSITIVE or TYPE_SCROLL_SENSITIVE in createStatement(int,int) method as well as we can make this object as updatable by:
    Statement stmt = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);
	
Commonly used methods of ResultSet interface
1) public boolean next():	is used to move the cursor to the one row next from the current position.
2) public boolean previous():	is used to move the cursor to the one row previous from the current position.
3) public boolean first():	is used to move the cursor to the first row in result set object.
4) public boolean last():	is used to move the cursor to the last row in result set object.
5) public boolean absolute(int row):	is used to move the cursor to the specified row number in the ResultSet object.
6) public boolean relative(int row):	is used to move the cursor to the relative row number in the ResultSet object, it may be positive or negative.
7) public int getInt(int columnIndex):	is used to return the data of specified column index of the current row as int.
8) public int getInt(String columnName):	is used to return the data of specified column name of the current row as int.
9) public String getString(int columnIndex):	is used to return the data of specified column index of the current row as String.
10) public String getString(String columnName):	is used to return the data of specified column name of the current row as String.


ex: 
ResultSet rs=stmt.executeQuery("select * from emp");  
  
//getting the record of 3rd row  
rs.absolute(3);  


PreparedStatement interface
-----------------------------
The PreparedStatement interface is a subinterface of Statement. It is used to execute parameterized query.

String sql="insert into emp values(?,?,?)";  
we are passing parameter (?) for the values. Its value will be set by calling the setter methods of PreparedStatement.

- The performance of the application will be faster if you use PreparedStatement interface because query is compiled only once.

syntax: public PreparedStatement prepareStatement(String query)throws SQLException{} 

Methods of PreparedStatement interface:

        Method	                                                                                Description
public void setInt(int paramIndex, int value)	                          sets the integer value to the given parameter index.
public void setString(int paramIndex, String value)                   	  sets the String value to the given parameter index.
public void setFloat(int paramIndex, float value)	                      sets the float value to the given parameter index.
public void setDouble(int paramIndex, double value)	                      sets the double value to the given parameter index.
public int executeUpdate()	                                              executes the query. It is used for create, drop, insert, update, delete etc.
public ResultSet executeQuery()	                                          executes the select query. It returns an instance of ResultSet.

ex:
PreparedStatement stmt=con.prepareStatement("insert into Emp values(?,?)");  
stmt.setInt(1,101);//1 specifies the first parameter in the query  
stmt.setString(2,"Ratan");  
  
int i=stmt.executeUpdate();  

Java ResultSetMetaData Interface
---------------------------------
- To get metadata of a table like total number of column, column name, column type etc. ,
   ResultSetMetaData interface is useful because it provides methods to get metadata from the ResultSet object.
   
Commonly used methods of ResultSetMetaData interface
       Method	                                                        Description
public int getColumnCount()throws SQLException	                      it returns the total number of columns in the ResultSet object.
public String getColumnName(int index)throws SQLException	          it returns the column name of the specified column index.
public String getColumnTypeName(int index)throws SQLException	      it returns the column type name for the specified index.
public String getTableName(int index)throws SQLException	          it returns the table name for the specified column index.

syntax: public ResultSetMetaData getMetaData()throws SQLException  

ex:
PreparedStatement ps=con.prepareStatement("select * from emp");  
ResultSet rs=ps.executeQuery();  
ResultSetMetaData rsmd=rs.getMetaData();  
  
System.out.println("Total columns: "+rsmd.getColumnCount());  
System.out.println("Column Name of 1st column: "+rsmd.getColumnName(1));  
System.out.println("Column Type Name of 1st column: "+rsmd.getColumnTypeName(1)); 


DatabaseMetaData interface
-----------------------------
- provides methods to get meta data of a database such as
 database product name, database product version, driver name, name of total number of tables, name of total number of views etc.
 
 Commonly used methods of DatabaseMetaData interface
public String getDriverName()throws SQLException: -- it returns the name of the JDBC driver.
public String getDriverVersion()throws SQLException: -- it returns the version number of the JDBC driver.
public String getUserName()throws SQLException: -- it returns the username of the database.
public String getDatabaseProductName()throws SQLException: -- it returns the product name of the database.
public String getDatabaseProductVersion()throws SQLException: -- it returns the product version of the database.
public ResultSet getTables(String catalog, String schemaPattern, String tableNamePattern, String[] types)throws SQLException: 
       -- it returns the description of the tables of the specified catalog. The table type can be TABLE, VIEW, ALIAS, SYSTEM TABLE, SYNONYM etc.


syntax: public DatabaseMetaData getMetaData()throws SQLException  

ex:
DatabaseMetaData dbmd=con.getMetaData();  
  
System.out.println("Driver Name: "+dbmd.getDriverName());  
System.out.println("Driver Version: "+dbmd.getDriverVersion());  
System.out.println("UserName: "+dbmd.getUserName());  
System.out.println("Database Product Name: "+dbmd.getDatabaseProductName());  
System.out.println("Database Product Version: "+dbmd.getDatabaseProductVersion());  































